group "${group}"
version "${version}"

apply plugin: 'java'
apply plugin: 'scala'

sourceCompatibility = "${jdkVersion}"

def scalaVersion = "${scalaMajorVersion}.${scalaMinorVersion}"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile group: 'com.typesafe.akka', name: 'akka-actor_2.12', version: "${akkaVersion}"
    compile "com.typesafe.akka:akka-stream_2.12:${akkaVersion}"
    compile "com.typesafe.akka:akka-http_2.12:${akkaHttpVersion}"
    compile "com.typesafe.akka:akka-http-testkit_2.12:${akkaHttpVersion}"
    compile "org.reactivemongo:reactivemongo_2.12:${reactiveMongoVersion}"
    compile "org.reactivemongo:reactivemongo-play-json_2.12:${reactiveMongoPlayJSONVersion}"
    compile "org.reactivemongo:play2-reactivemongo_2.12:${reactiveMongoPlayVersion}"
    compile "com.typesafe.play:play-json_2.12:${playFrameworkVersion}"
    compile group: 'com.newmotion', name: 'akka-rabbitmq_2.12', version: "${akkaRabbitMQVersion}"
    compile "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: "${httpClientVersion}"

    testCompile group: 'junit', name: 'junit', version: "${jUnitVersion}"
    testCompile group: 'org.scalatest' , name: 'scalatest_2.12' , version: "${scalaTestVersion}"
    testCompile group: 'com.typesafe.akka' , name: 'akka-testkit_2.12' , version: "${akkaTestKitVersion}"

}

compileScala {
    scalaCompileOptions.additionalParameters = ["-feature"]
}

task restoreDBTask(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'mongorestore --drop -d collabora ./MongoDBBackup/collabora/'
    } else {
        commandLine 'sh', '-c', 'mongorestore --drop -d collabora ./MongoDBBackup/collabora/'
    }
}

task spec(dependsOn: ['testClasses'], type: JavaExec) {
    tasks.restoreDBTask.execute()
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/test', '-o']
    classpath = sourceSets.test.runtimeClasspath
}

testClasses.doLast {
    tasks.spec.execute()
}
